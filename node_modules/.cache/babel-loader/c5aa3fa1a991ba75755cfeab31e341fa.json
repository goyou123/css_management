{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\goyouchan\\\\Desktop\\\\reactTest\\\\portfolio_description\\\\src\\\\pages\\\\SiteDetailsPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { readRealTimeSite, readSitesDetail } from 'store/actions/siteDetails';\nimport SiteDetailsTemplate from 'templates/SiteDetails/SiteDetailsTemplate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SiteDatailsPage() {\n  _s();\n  const [selectSiteId, _setSelectSiteId] = useState(''); // 사이트리스트에서 클릭한 사이트 ID 를 SiteInfo 컴포넌트에 전달\n  const dispatch = useDispatch();\n\n  // 기존에는 1분마다 데이터를 업데이트 해주는 형식이지만, API를 사용하지 않으므로 간단하게 처리\n  useEffect(() => {\n    dispatch(readSitesDetail());\n  }, []);\n  useEffect(() => {\n    // console.log('변경된 사이트 아이디 : ', selectSiteId)\n    if (selectSiteId) {\n      dispatch(readRealTimeSite(selectSiteId));\n    }\n  }, [selectSiteId]);\n  return /*#__PURE__*/_jsxDEV(SiteDetailsTemplate, {\n    selectSiteId: selectSiteId,\n    _setSelectSiteId: _setSelectSiteId\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 12\n  }, this);\n}\n_s(SiteDatailsPage, \"YAUdWGXmlOLJOUHwi6vBuwDPAlY=\", false, function () {\n  return [useDispatch];\n});\n_c = SiteDatailsPage;\nexport default SiteDatailsPage;\nvar _c;\n$RefreshReg$(_c, \"SiteDatailsPage\");","map":{"version":3,"names":["React","useState","useEffect","useDispatch","readRealTimeSite","readSitesDetail","SiteDetailsTemplate","SiteDatailsPage","selectSiteId","_setSelectSiteId","dispatch"],"sources":["C:/Users/goyouchan/Desktop/reactTest/portfolio_description/src/pages/SiteDetailsPage.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { readRealTimeSite, readSitesDetail } from 'store/actions/siteDetails'\r\nimport SiteDetailsTemplate from 'templates/SiteDetails/SiteDetailsTemplate'\r\n\r\nfunction SiteDatailsPage() {\r\n    const [selectSiteId, _setSelectSiteId] = useState<string>('') // 사이트리스트에서 클릭한 사이트 ID 를 SiteInfo 컴포넌트에 전달\r\n    const dispatch = useDispatch()\r\n\r\n    // 기존에는 1분마다 데이터를 업데이트 해주는 형식이지만, API를 사용하지 않으므로 간단하게 처리\r\n    useEffect(() => {\r\n        dispatch(readSitesDetail())\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        // console.log('변경된 사이트 아이디 : ', selectSiteId)\r\n        if (selectSiteId) {\r\n            dispatch(readRealTimeSite(selectSiteId))\r\n        }\r\n    }, [selectSiteId])\r\n\r\n    return <SiteDetailsTemplate selectSiteId={selectSiteId} _setSelectSiteId={_setSelectSiteId} />\r\n}\r\n\r\nexport default SiteDatailsPage\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,gBAAgB,EAAEC,eAAe,QAAQ,2BAA2B;AAC7E,OAAOC,mBAAmB,MAAM,2CAA2C;AAAA;AAE3E,SAASC,eAAe,GAAG;EAAA;EACvB,MAAM,CAACC,YAAY,EAAEC,gBAAgB,CAAC,GAAGR,QAAQ,CAAS,EAAE,CAAC,EAAC;EAC9D,MAAMS,QAAQ,GAAGP,WAAW,EAAE;;EAE9B;EACAD,SAAS,CAAC,MAAM;IACZQ,QAAQ,CAACL,eAAe,EAAE,CAAC;EAC/B,CAAC,EAAE,EAAE,CAAC;EAENH,SAAS,CAAC,MAAM;IACZ;IACA,IAAIM,YAAY,EAAE;MACdE,QAAQ,CAACN,gBAAgB,CAACI,YAAY,CAAC,CAAC;IAC5C;EACJ,CAAC,EAAE,CAACA,YAAY,CAAC,CAAC;EAElB,oBAAO,QAAC,mBAAmB;IAAC,YAAY,EAAEA,YAAa;IAAC,gBAAgB,EAAEC;EAAiB;IAAA;IAAA;IAAA;EAAA,QAAG;AAClG;AAAC,GAjBQF,eAAe;EAAA,QAEHJ,WAAW;AAAA;AAAA,KAFvBI,eAAe;AAmBxB,eAAeA,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module"}