{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\goyouchan\\\\Desktop\\\\reactTest\\\\portfolio_description\\\\src\\\\pages\\\\SiteDetailsPage.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { readRealTimeSite, readSitesDetail } from 'store/actions/siteDetails';\nimport SiteDetailsTemplate from 'templates/SiteDetails/SiteDetailsTemplate';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction SiteDatailsPage() {\n  _s();\n  const [selectSiteId, _setSelectSiteId] = useState(''); // 사이트리스트에서 클릭한 사이트 ID 를 SiteInfo 컴포넌트에 전달\n  const dispatch = useDispatch();\n  const changeValue = useCallback(id => {\n    _setSelectSiteId(id);\n  }, [selectSiteId]); // we watch it on every click\n\n  // 기존에는 1분마다 데이터를 업데이트 해주는 형식이지만, API를 사용하지 않으므로 간단하게 처리\n  useEffect(() => {\n    dispatch(readSitesDetail());\n    dispatch(readRealTimeSite());\n  }, []);\n\n  /** 기존 1분마다 데이터 업데이트 하는 코드(생략) */\n  // useEffect(() => {\n  //     const checkedIds = getLocalStorage('SELECT_CLUSTER')\n\n  //     let timer: ReturnType<typeof setTimeout>\n  //     const init = async () => {\n  //         if (selectSiteId !== '') {\n  //             // dispatch(readRealTimeSite(selectSiteId))\n  //             dispatch(readSitesDetail())\n  //         }\n\n  //         timer = setTimeout(init, 60000)\n  //     }\n  //     if (checkedIds) {\n  //         init()\n  //     }\n\n  //     return () => {\n  //         clearTimeout(timer)\n  //     }\n  // }, [dispatch, clusterIds])\n\n  // useEffect(() => {\n  //     if (selectSiteId !== '') dispatch(readRealTimeSite(selectSiteId))\n  // }, [selectSiteId])\n\n  return /*#__PURE__*/_jsxDEV(SiteDetailsTemplate, {\n    selectSiteId: selectSiteId,\n    _setSelectSiteId: _setSelectSiteId\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 12\n  }, this);\n}\n_s(SiteDatailsPage, \"JymFFveb41+vZs4qnbAXIESBVog=\", false, function () {\n  return [useDispatch];\n});\n_c = SiteDatailsPage;\nexport default SiteDatailsPage;\nvar _c;\n$RefreshReg$(_c, \"SiteDatailsPage\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useDispatch","readRealTimeSite","readSitesDetail","SiteDetailsTemplate","SiteDatailsPage","selectSiteId","_setSelectSiteId","dispatch","changeValue","id"],"sources":["C:/Users/goyouchan/Desktop/reactTest/portfolio_description/src/pages/SiteDetailsPage.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { readRealTimeSite, readSitesDetail } from 'store/actions/siteDetails'\r\nimport { getLocalStorage } from 'lib/utils'\r\nimport SiteDetailsTemplate from 'templates/SiteDetails/SiteDetailsTemplate'\r\n\r\nfunction SiteDatailsPage() {\r\n    const [selectSiteId, _setSelectSiteId] = useState<string>('') // 사이트리스트에서 클릭한 사이트 ID 를 SiteInfo 컴포넌트에 전달\r\n    const dispatch = useDispatch()\r\n    const changeValue = useCallback(\r\n        (id: string) => {\r\n            _setSelectSiteId(id)\r\n        },\r\n        [selectSiteId]\r\n    ) // we watch it on every click\r\n\r\n    // 기존에는 1분마다 데이터를 업데이트 해주는 형식이지만, API를 사용하지 않으므로 간단하게 처리\r\n    useEffect(() => {\r\n        dispatch(readSitesDetail())\r\n        dispatch(readRealTimeSite())\r\n    }, [])\r\n\r\n    /** 기존 1분마다 데이터 업데이트 하는 코드(생략) */\r\n    // useEffect(() => {\r\n    //     const checkedIds = getLocalStorage('SELECT_CLUSTER')\r\n\r\n    //     let timer: ReturnType<typeof setTimeout>\r\n    //     const init = async () => {\r\n    //         if (selectSiteId !== '') {\r\n    //             // dispatch(readRealTimeSite(selectSiteId))\r\n    //             dispatch(readSitesDetail())\r\n    //         }\r\n\r\n    //         timer = setTimeout(init, 60000)\r\n    //     }\r\n    //     if (checkedIds) {\r\n    //         init()\r\n    //     }\r\n\r\n    //     return () => {\r\n    //         clearTimeout(timer)\r\n    //     }\r\n    // }, [dispatch, clusterIds])\r\n\r\n    // useEffect(() => {\r\n    //     if (selectSiteId !== '') dispatch(readRealTimeSite(selectSiteId))\r\n    // }, [selectSiteId])\r\n\r\n    return <SiteDetailsTemplate selectSiteId={selectSiteId} _setSelectSiteId={_setSelectSiteId} />\r\n}\r\n\r\nexport default SiteDatailsPage\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,WAAW,QAAQ,OAAO;AAC/D,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,gBAAgB,EAAEC,eAAe,QAAQ,2BAA2B;AAE7E,OAAOC,mBAAmB,MAAM,2CAA2C;AAAA;AAE3E,SAASC,eAAe,GAAG;EAAA;EACvB,MAAM,CAACC,YAAY,EAAEC,gBAAgB,CAAC,GAAGT,QAAQ,CAAS,EAAE,CAAC,EAAC;EAC9D,MAAMU,QAAQ,GAAGP,WAAW,EAAE;EAC9B,MAAMQ,WAAW,GAAGT,WAAW,CAC1BU,EAAU,IAAK;IACZH,gBAAgB,CAACG,EAAE,CAAC;EACxB,CAAC,EACD,CAACJ,YAAY,CAAC,CACjB,EAAC;;EAEF;EACAP,SAAS,CAAC,MAAM;IACZS,QAAQ,CAACL,eAAe,EAAE,CAAC;IAC3BK,QAAQ,CAACN,gBAAgB,EAAE,CAAC;EAChC,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;;EAEA,oBAAO,QAAC,mBAAmB;IAAC,YAAY,EAAEI,YAAa;IAAC,gBAAgB,EAAEC;EAAiB;IAAA;IAAA;IAAA;EAAA,QAAG;AAClG;AAAC,GA3CQF,eAAe;EAAA,QAEHJ,WAAW;AAAA;AAAA,KAFvBI,eAAe;AA6CxB,eAAeA,eAAe;AAAA;AAAA"},"metadata":{},"sourceType":"module"}